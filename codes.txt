-------------------------------------------------
Binary Exponentiation

double _pow(double &a, int b) {
    double res = 1;
    while (b > 0) {
        if (b & 1)
            res = res * a ;
        a = a * a;
        b >>= 1;
    }
    return res;
}

-----------------------------------------------------

            Counting


const ll mod  = 1e9 + 7;
namespace modop {
	ll madd(ll a, ll b) {
	  return (a + b) % mod;
	}
	ll msub(ll a, ll b) {
	  return (((a - b) % mod) + mod) % mod;
	}
	ll mmul(ll a, ll b) {
	  return ((a % mod) * (b % mod)) % mod;
	}
	ll mpow(ll base, ll exp) {
	  ll res = 1;
	  while (exp) {
		if (exp % 2 == 1){
			res = (res * base) % mod;
		}
		exp >>= 1;
		base = (base * base) % mod;
	  }
	  return res;
	}
	ll minv(ll base) {
	  return mpow(base, mod - 2);
	}
	ll mdiv(ll a, ll b) {
	  return mmul(a, minv(b));
	}
	
	const ll FACTORIAL_SIZE = 1.1e6;
	ll fact[FACTORIAL_SIZE], ifact[FACTORIAL_SIZE];
	void gen_factorial(ll n) {
		fact[0] = fact[1] = ifact[0] = ifact[1] = 1;
		
		for (ll i = 2; i <= n; i++) {
			fact[i] = (i * fact[i - 1]) % mod;
            //dbg(fact[i]);
		}
		ifact[n] = minv(fact[n]);
		for (ll i = n - 1; i >= 2; i--) {
			ifact[i] = ((i + 1) * ifact[i + 1]) % mod;
		}
	}
	ll nck(ll n, ll k) {
		ll den = (ifact[k] * ifact[n - k]) % mod;
        //dbg(ifact[k],ifact[n - k]);
		return (den * fact[n]) % mod;
	}
}
 
using namespace modop;


ll C(int n, int k) {
    ll res = 1;
    for (int i = n - k + 1; i <= n; ++i)
        res *= i;
    for (int i = 2; i <= k; ++i)
        res /= i;
    return res;
}


ll fac(ll k){
    ll fact = 1;
    for(int i=1; i<=k; i++)
        fact = fact * i;
    return fact;
}

--------------------------------------------------------

- Don't Forget to check at the last iteration i.e, updating answer at the end of

  iteration means i == n-1 check  to update the answer.

If stuck Solve the examples they give  

--------------------------------------------------------

            Graphs
- A undirected graph which has n vertices and n - 1 edges and is 
connected is a tree.

- A undirected graph which has n vertices and n  edges and that is 
    connected has a cycle a there is only an extra edge an no extra 
    vertices.


------------------------------------------------------------------------------

                    DP
In computer science, a problem is said to have optimal substructure if an optimal
 solution can be constructed from optimal solutions of its subproblems.
This property is used to determine the usefulness of dynamic programming and
 greedy algorithms for a problem.

Typically, a greedy algorithm is used to solve a problem with optimal substructure
 if it can be proven by induction that this is optimal at each step.
  Otherwise, provided the problem exhibits overlapping subproblems as well,
dynamic programming is used.
 If there are no appropriate greedy algorithms and the problem fails 
 to exhibit overlapping subproblems, 
 often a lengthy but straightforward search of the solution space is the best alternative.





 ---- While dividing be careful of dividing by zero


const int64_t INF = 1e17;
inline int64_t mul(int64_t a, int64_t b)
{
	return (INF / a > b ? a * b : INF);
}

inline int64_t add(int64_t a, int64_t b)
{
	return (a + b >= INF ? INF : a + b);
}

-- Number Theory

struct Sieve {
    vector<bool> isp;
    vector<int> primes;
    vector<short> smallest_fac;
 
    Sieve(int n, bool gen_primes = false, bool gen_mn = false) {
        isp.assign(n + 1, true); isp[0] = isp[1] = false;
        for (int i = 2; i * i <= n; ++i)
            if (isp[i])
                for (int j = i * i; j <= n; j += i)
                    isp[j] = false;
 
        if (gen_primes)
            for (int i = 2; i <= n; ++i)
                if (isp[i])
                    primes.push_back(i);
 
        if (gen_mn) {
            smallest_fac.resize(n + 1);
            for (int i = 2; i * i <= n; ++i)
                if (isp[i])
                    for (int j = i * i; j <= n; j += i)
                        smallest_fac[j] = i;
        }
    }
 
    bool is_prime(int k) const {
        return isp[k];
    }
 
    bool operator[](int k) const {
        return isp[k];
    }
 
    vector<pair<int, int>> get_prime_divs(int k) const {
        static vector<int> v;
        v.clear();
        while (k != 1 && !isp[k]) {
            v.pb(smallest_fac[k]);
            k /= smallest_fac[k];                
        }
        if (k != 1)
            v.pb(k);
        sort(v.begin(), v.end());
        vector<pair<int, int>> res;
        for (int i : v) {
            if (res.empty() || i != res.back().first)
                res.emplace_back(i, 0);
            res.back().second++;
        }
        return res;
    }
	
	int cnt_divs(ll n){
		int ans = 0;
        for (int p : primes) {
            if (p * p > n) break;
            while (n % p == 0) {
                n /= p;
                ++ans;
            }
        }
        if (n != 1) ++ans;
        return ans;
	}

    int phi(int n) const {
        auto v = get_prime_divs(n);
        for (auto p : v)
            n = n / p.fr * (p.fr - 1);
        return n;
    }
};

vector<pair<ll,int>> pff(ll n){
    vector<pair<ll,int>> fac;
    ll cnt=0;
    while (n % 2 == 0)
    {
        cnt++;
        n = n/2;
    }
    if(cnt!=0)
    fac.push_back({2,cnt});


    for (ll i = 3; i * i <= n; i = i + 2)
    {
        cnt=0;
        if(n==1)break;
        while (n % i == 0)
        {
            cnt++;
            n = n/i;
        }
            if(cnt!=0)
    fac.push_back({i,cnt});
    }
    if (n > 2)
    fac.push_back({n,1});
    
    return fac;
}


vector<int> primes(ll x){
    vector<int> v;
    for(ll i = 2;i * i <= x;++i){
        if(x % i == 0){
            v.pb(i);
            while(x % i == 0){
                x /= i;
            }
        } 
    }
    if(x > 1)v.pb(x);
    return v;
}

-- Union Find

struct UF{
    vector<int> par, sz;
    UF() {}
    UF(int n):par(n), sz(n, 1){
        for(int i=0; i<n; i++) par[i]=i;
    }
    int find(int x){
        if(par[x]==x) return x;
        return par[x]=find(par[x]);
    }
    void unite(int x, int y){
        x=find(x); y=find(y);
        if(x==y) return;
        if(sz[x]>sz[y]) swap(x, y);
        par[x]=y;
        sz[y]+=sz[x];
    }
    bool same(int x, int y){
        return find(x)==find(y);
    }
    int size(int x){
        return sz[find(x)];
    }
};

-- LPS


vector<int> LPS(string s){

	vector<int> lps;
	int m = s.size();
	lps.resize(m);
	int i = 1,len = 0;
	while(i < m){
		if(s[i] == s[len]){
			lps[i] = len + 1;
			++i;
			++len;
		}
		else{
			if(len){
				len = lps[len - 1];
			}
			else{
				lps[i] = 0;
				++i;
			}
		}
	}
	return lps;

}	

--- Lazy Seg (MAX IMPLEMENTATION)

void push(int v) {
    t[v*2] += lazy[v];
    lazy[v*2] += lazy[v];
    t[v*2+1] += lazy[v];
    lazy[v*2+1] += lazy[v];
    lazy[v] = 0;
}

void update(int v, int tl, int tr, int l, int r, int addend) {
    if (l > r) 
        return;
    if (l == tl && tr == r) {
        t[v] += addend;
        lazy[v] += addend;
    } else {
        push(v);
        int tm = (tl + tr) / 2;
        update(v*2, tl, tm, l, min(r, tm), addend);
        update(v*2+1, tm+1, tr, max(l, tm+1), r, addend);
        t[v] = max(t[v*2], t[v*2+1]);
    }
}

int query(int v, int tl, int tr, int l, int r) {
    if (l > r)
        return -INF;
    if (l <= tl && tr <= r)
        return t[v];
    push(v);
    int tm = (tl + tr) / 2;
    return max(query(v*2, tl, tm, l, min(r, tm)), 
               query(v*2+1, tm+1, tr, max(l, tm+1), r));
}


--- basic Seg tree

void build(int a[], int v, int tl, int tr) {
    if (tl == tr) {
        t[v] = a[tl];
    } else {
        int tm = (tl + tr) / 2;
        build(a, v*2, tl, tm);
        build(a, v*2+1, tm+1, tr);
        t[v] = t[v*2] + t[v*2+1];
    }
}

int sum(int v, int tl, int tr, int l, int r) {
    if (l > r) 
        return 0;
    if (l == tl && r == tr) {
        return t[v];
    }
    int tm = (tl + tr) / 2;
    return sum(v*2, tl, tm, l, min(r, tm))
           + sum(v*2+1, tm+1, tr, max(l, tm+1), r);
}

void update(int v, int tl, int tr, int pos, int new_val) {
    if (tl == tr) {
        t[v] = new_val;
    } else {
        int tm = (tl + tr) / 2;
        if (pos <= tm)
            update(v*2, tl, tm, pos, new_val);
        else
            update(v*2+1, tm+1, tr, pos, new_val);
        t[v] = t[v*2] + t[v*2+1];
    }
}

-- segtree

template<class T> 
struct segtree{
    vector<T> tree,lazy;
    bool islazy;
    int sz;
    int n;
    segtree(){

    }
    segtree(T N,T val,bool do_lazy = false){
        sz = 4 * N;
        tree.assign(sz,val);
        islazy = 0;
        if(do_lazy){
            lazy.assign(sz,0);
            islazy = 1;
        }
    }
    T segf(T a,T b){  // the function 
        if(a * b == 0)return max(a,b);
        return gcd(a,b); 
    }
    void construct(vector<T> &v){  // 2 *i  , 2 *i + 1
        n = v.size();
        cst(1,0,n - 1,v);
    }   
    void cst(int node,int l,int r,vector<T> &v){ // 0 indexed (l , r)
        if(l > r)return;
        if(l == r){
            tree[node] = v[l];
            return;
        }
        int mid = (l + r) / 2;
        cst(2 * node,l,mid,v);
        cst(2 * node + 1,mid + 1,r,v);
        tree[node] = segf(tree[2 * node],tree[2 * node + 1]);
    }
    void push(int node){   // incomplete
        tree[node] += lazy[node];
        if(node < n){
            lazy[2 * node] += lazy[node];
            lazy[2 * node + 1] += lazy[node];
        }
        lazy[node] = 0;
    }
    T ask_range(int node,int low,int high,int l,int r){ // low high is of tree , l r is of query
        if(low > high){
            return 0;
        }        
        if(islazy)push(node);
        if(r < low || l > high){
            return 0;
        }
        if(l <= low && r >= high)return tree[node];
        int mid = (low + high) / 2;
        int left = ask_range(2 * node,low,mid,l,r);
        int right = ask_range(2 * node + 1,mid + 1,high,l,r);
        return segf(left,right);
    }
    T query(int l,int r){
        // l--;
        // r--;
        return ask_range(1,0,n - 1,l,r);
    }

    // lazy upd incomplete
};

-- LCA

struct LCA{
    int n;
    int root;
    vector<vector<int>> g;
    vector<vector<int>> up; 
    vector<int> depth;  
    int LOG;
    LCA(){

    }
    LCA(vector<vector<int>> &adj,int r = 0){ // 0 indexed based LCA 
        g = adj; 
        n = adj.size();
        root = r;
        preprocess();   
    }
    void preprocess(){
        LOG = 17; // change log if required(17 if 1e5 20 if 1e6)
        up.assign(n,vector<int> (LOG));
        depth.assign(n,0);
        for(int i = 0;i < LOG;++i)up[root][i] = root;
        dfs(root,-1);
    }
    void dfs(int u,int par){
        if(par == -1){
            depth[u] = 0;
        }
        else{
            depth[u] = 1 + depth[par];
        }
        for(auto x : g[u]){
            if(x == par)continue;
            up[x][0] = u;
            for(int j = 1;j < LOG;++j){
                up[x][j] = up[up[x][j - 1]][j - 1]; // powers of 2 2 ^ 3 = 2 ^ 2 + 2 ^ 2
            }
            dfs(x,u);
        }
    }
    int kth_anc(int u,int k){
        for(int j = LOG - 1;j >= 0;--j){
            if(k&(1 << j))u = up[u][j];
        }
        return u;
    }
    int lca(int a,int b){
        // d b > d a
        if(depth[a] > depth[b]){
            swap(a,b);
        }
        // make them both at same depth
        int k = depth[b] - depth[a];
        b = kth_anc(b,k);
        if(a == b){
            return a;
        }
        // start from higher powers
        for(int j = LOG - 1;j >= 0;--j){
            if(up[a][j] != up[b][j]){
                a = up[a][j];
                b = up[b][j];
            }
        }
        return up[a][0];
    }
    int dis(int a,int b){
        int x = lca(a,b);
        return depth[a] + depth[b] - 2 * depth[x];
    }
};
